// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComGui774umeKriePkgKrieEvents(in *jlexer.Lexer, out *EventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.KernelEventSerializer = new(KernelEventSerializer)
	out.ProcessContextSerializer = new(ProcessContextSerializer)
	out.InitModuleEventSerializer = new(InitModuleEventSerializer)
	out.DeleteModuleEventSerializer = new(DeleteModuleEventSerializer)
	out.BPFEventSerializer = new(BPFEventSerializer)
	out.BPFFilterEventSerializer = new(BPFFilterEventSerializer)
	out.PtraceEventSerializer = new(PtraceEventSerializer)
	out.KProbeEventSerializer = new(KProbeEventSerializer)
	out.SysCtlEventEventSerializer = new(SysCtlEventEventSerializer)
	out.HookedSyscallEventSerializer = new(HookedSyscallEventSerializer)
	out.EventCheckEventSerializer = new(EventCheckEventSerializer)
	out.KernelParameterEventSerializer = new(KernelParameterEventSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if in.IsNull() {
				in.Skip()
				out.KernelEventSerializer = nil
			} else {
				if out.KernelEventSerializer == nil {
					out.KernelEventSerializer = new(KernelEventSerializer)
				}
				(*out.KernelEventSerializer).UnmarshalEasyJSON(in)
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.ProcessContextSerializer = nil
			} else {
				if out.ProcessContextSerializer == nil {
					out.ProcessContextSerializer = new(ProcessContextSerializer)
				}
				(*out.ProcessContextSerializer).UnmarshalEasyJSON(in)
			}
		case "init_module":
			if in.IsNull() {
				in.Skip()
				out.InitModuleEventSerializer = nil
			} else {
				if out.InitModuleEventSerializer == nil {
					out.InitModuleEventSerializer = new(InitModuleEventSerializer)
				}
				(*out.InitModuleEventSerializer).UnmarshalEasyJSON(in)
			}
		case "delete_module":
			if in.IsNull() {
				in.Skip()
				out.DeleteModuleEventSerializer = nil
			} else {
				if out.DeleteModuleEventSerializer == nil {
					out.DeleteModuleEventSerializer = new(DeleteModuleEventSerializer)
				}
				(*out.DeleteModuleEventSerializer).UnmarshalEasyJSON(in)
			}
		case "bpf":
			if in.IsNull() {
				in.Skip()
				out.BPFEventSerializer = nil
			} else {
				if out.BPFEventSerializer == nil {
					out.BPFEventSerializer = new(BPFEventSerializer)
				}
				(*out.BPFEventSerializer).UnmarshalEasyJSON(in)
			}
		case "bpf_filter":
			if in.IsNull() {
				in.Skip()
				out.BPFFilterEventSerializer = nil
			} else {
				if out.BPFFilterEventSerializer == nil {
					out.BPFFilterEventSerializer = new(BPFFilterEventSerializer)
				}
				(*out.BPFFilterEventSerializer).UnmarshalEasyJSON(in)
			}
		case "ptrace":
			if in.IsNull() {
				in.Skip()
				out.PtraceEventSerializer = nil
			} else {
				if out.PtraceEventSerializer == nil {
					out.PtraceEventSerializer = new(PtraceEventSerializer)
				}
				(*out.PtraceEventSerializer).UnmarshalEasyJSON(in)
			}
		case "kprobe":
			if in.IsNull() {
				in.Skip()
				out.KProbeEventSerializer = nil
			} else {
				if out.KProbeEventSerializer == nil {
					out.KProbeEventSerializer = new(KProbeEventSerializer)
				}
				(*out.KProbeEventSerializer).UnmarshalEasyJSON(in)
			}
		case "sysctl":
			if in.IsNull() {
				in.Skip()
				out.SysCtlEventEventSerializer = nil
			} else {
				if out.SysCtlEventEventSerializer == nil {
					out.SysCtlEventEventSerializer = new(SysCtlEventEventSerializer)
				}
				(*out.SysCtlEventEventSerializer).UnmarshalEasyJSON(in)
			}
		case "hooked_syscall":
			if in.IsNull() {
				in.Skip()
				out.HookedSyscallEventSerializer = nil
			} else {
				if out.HookedSyscallEventSerializer == nil {
					out.HookedSyscallEventSerializer = new(HookedSyscallEventSerializer)
				}
				(*out.HookedSyscallEventSerializer).UnmarshalEasyJSON(in)
			}
		case "event_check":
			if in.IsNull() {
				in.Skip()
				out.EventCheckEventSerializer = nil
			} else {
				if out.EventCheckEventSerializer == nil {
					out.EventCheckEventSerializer = new(EventCheckEventSerializer)
				}
				(*out.EventCheckEventSerializer).UnmarshalEasyJSON(in)
			}
		case "kernel_parameter":
			if in.IsNull() {
				in.Skip()
				out.KernelParameterEventSerializer = nil
			} else {
				if out.KernelParameterEventSerializer == nil {
					out.KernelParameterEventSerializer = new(KernelParameterEventSerializer)
				}
				(*out.KernelParameterEventSerializer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComGui774umeKriePkgKrieEvents(out *jwriter.Writer, in EventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.KernelEventSerializer != nil {
		const prefix string = ",\"event\":"
		first = false
		out.RawString(prefix[1:])
		(*in.KernelEventSerializer).MarshalEasyJSON(out)
	}
	if in.ProcessContextSerializer != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProcessContextSerializer).MarshalEasyJSON(out)
	}
	if in.InitModuleEventSerializer != nil {
		const prefix string = ",\"init_module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InitModuleEventSerializer).MarshalEasyJSON(out)
	}
	if in.DeleteModuleEventSerializer != nil {
		const prefix string = ",\"delete_module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DeleteModuleEventSerializer).MarshalEasyJSON(out)
	}
	if in.BPFEventSerializer != nil {
		const prefix string = ",\"bpf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BPFEventSerializer).MarshalEasyJSON(out)
	}
	if in.BPFFilterEventSerializer != nil {
		const prefix string = ",\"bpf_filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BPFFilterEventSerializer).MarshalEasyJSON(out)
	}
	if in.PtraceEventSerializer != nil {
		const prefix string = ",\"ptrace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PtraceEventSerializer).MarshalEasyJSON(out)
	}
	if in.KProbeEventSerializer != nil {
		const prefix string = ",\"kprobe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.KProbeEventSerializer).MarshalEasyJSON(out)
	}
	if in.SysCtlEventEventSerializer != nil {
		const prefix string = ",\"sysctl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SysCtlEventEventSerializer).MarshalEasyJSON(out)
	}
	if in.HookedSyscallEventSerializer != nil {
		const prefix string = ",\"hooked_syscall\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HookedSyscallEventSerializer).MarshalEasyJSON(out)
	}
	if in.EventCheckEventSerializer != nil {
		const prefix string = ",\"event_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EventCheckEventSerializer).MarshalEasyJSON(out)
	}
	if in.KernelParameterEventSerializer != nil {
		const prefix string = ",\"kernel_parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.KernelParameterEventSerializer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComGui774umeKriePkgKrieEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComGui774umeKriePkgKrieEvents(l, v)
}
