// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8b397f8aDecodeGithubComGui774umeKriePkgKrieEvents(in *jlexer.Lexer, out *RegisterCheckEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.RegisterCheckEvent = new(RegisterCheckEvent)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stack_pointer":
			out.StackPointer = MemoryPointer(in.Uint64())
		case "instruction_pointer":
			out.InstructionPointer = MemoryPointer(in.Uint64())
		case "frame_pointer":
			out.FramePointer = MemoryPointer(in.Uint64())
		case "hook_point":
			out.HookPoint = HookPoint(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8b397f8aEncodeGithubComGui774umeKriePkgKrieEvents(out *jwriter.Writer, in RegisterCheckEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stack_pointer\":"
		out.RawString(prefix[1:])
		out.Raw((in.StackPointer).MarshalJSON())
	}
	{
		const prefix string = ",\"instruction_pointer\":"
		out.RawString(prefix)
		out.Raw((in.InstructionPointer).MarshalJSON())
	}
	{
		const prefix string = ",\"frame_pointer\":"
		out.RawString(prefix)
		out.Raw((in.FramePointer).MarshalJSON())
	}
	{
		const prefix string = ",\"hook_point\":"
		out.RawString(prefix)
		out.Raw((in.HookPoint).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterCheckEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8b397f8aEncodeGithubComGui774umeKriePkgKrieEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterCheckEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8b397f8aDecodeGithubComGui774umeKriePkgKrieEvents(l, v)
}
