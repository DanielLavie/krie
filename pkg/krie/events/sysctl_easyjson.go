// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4b8a0936DecodeGithubComGui774umeKriePkgKrieEvents(in *jlexer.Lexer, out *SysCtlEventEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.SysCtlEvent = new(SysCtlEvent)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "write_access":
			out.WriteAccess = bool(in.Bool())
		case "file_position":
			out.FilePosition = uint32(in.Uint32())
		case "action":
			out.Action = SysCtlAction(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "current_value":
			out.CurrentValue = string(in.String())
		case "new_value":
			out.NewValue = string(in.String())
		case "new_value_overridden_with":
			out.NewValueOverriddenWith = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b8a0936EncodeGithubComGui774umeKriePkgKrieEvents(out *jwriter.Writer, in SysCtlEventEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"write_access\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.WriteAccess))
	}
	{
		const prefix string = ",\"file_position\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FilePosition))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Raw((in.Action).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"current_value\":"
		out.RawString(prefix)
		out.String(string(in.CurrentValue))
	}
	if in.NewValue != "" {
		const prefix string = ",\"new_value\":"
		out.RawString(prefix)
		out.String(string(in.NewValue))
	}
	if in.NewValueOverriddenWith != "" {
		const prefix string = ",\"new_value_overridden_with\":"
		out.RawString(prefix)
		out.String(string(in.NewValueOverriddenWith))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SysCtlEventEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b8a0936EncodeGithubComGui774umeKriePkgKrieEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SysCtlEventEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b8a0936DecodeGithubComGui774umeKriePkgKrieEvents(l, v)
}
