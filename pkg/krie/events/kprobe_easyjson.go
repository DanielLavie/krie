// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson602acdffDecodeGithubComGui774umeKriePkgKrieEvents(in *jlexer.Lexer, out *KProbeEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.KProbeEvent = new(KProbeEvent)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = MemoryPointer(in.Uint64())
		case "string":
			out.Symbol = string(in.String())
		case "command":
			out.Command = KProbeCommand(in.Uint32())
		case "type":
			out.Type = KProbeType(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson602acdffEncodeGithubComGui774umeKriePkgKrieEvents(out *jwriter.Writer, in KProbeEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != 0 {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Address).MarshalJSON())
	}
	if in.Symbol != "" {
		const prefix string = ",\"string\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Command).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KProbeEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson602acdffEncodeGithubComGui774umeKriePkgKrieEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KProbeEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson602acdffDecodeGithubComGui774umeKriePkgKrieEvents(l, v)
}
